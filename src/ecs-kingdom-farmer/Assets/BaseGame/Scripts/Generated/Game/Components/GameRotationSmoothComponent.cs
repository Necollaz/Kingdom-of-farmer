//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRotationSmooth;

    public static Entitas.IMatcher<GameEntity> RotationSmooth {
        get {
            if (_matcherRotationSmooth == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RotationSmooth);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRotationSmooth = matcher;
            }

            return _matcherRotationSmooth;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public BaseGame.Scripts.Gameplay.Features.Movement.RotationSmooth rotationSmooth { get { return (BaseGame.Scripts.Gameplay.Features.Movement.RotationSmooth)GetComponent(GameComponentsLookup.RotationSmooth); } }
    public float RotationSmooth { get { return rotationSmooth.Value; } }
    public bool hasRotationSmooth { get { return HasComponent(GameComponentsLookup.RotationSmooth); } }

    public GameEntity AddRotationSmooth(float newValue) {
        var index = GameComponentsLookup.RotationSmooth;
        var component = (BaseGame.Scripts.Gameplay.Features.Movement.RotationSmooth)CreateComponent(index, typeof(BaseGame.Scripts.Gameplay.Features.Movement.RotationSmooth));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceRotationSmooth(float newValue) {
        var index = GameComponentsLookup.RotationSmooth;
        var component = (BaseGame.Scripts.Gameplay.Features.Movement.RotationSmooth)CreateComponent(index, typeof(BaseGame.Scripts.Gameplay.Features.Movement.RotationSmooth));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveRotationSmooth() {
        RemoveComponent(GameComponentsLookup.RotationSmooth);
        return this;
    }
}
